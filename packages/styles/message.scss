@use 'sass:map';

@use './shared' as *;
@use './design' as *;

$message: () !default;
$message: map.merge(
  (
    bg-color: get-css-var('bg-color-base'),
    icon-color: red
  ),
  $message
);

.#{$namespace}-message {
  &-vars {
    @include define-preset-values('message', $message);
  }

  @mixin define-message-style($style-map) {
    @include define-preset-style('message', $style-map);
  }

  position: fixed;
  padding: 12px 24px;
  right: 0;
  bottom: 60px;
  transform: translateX(-60px);
  transition: opacity get-css-var('transition-duration') ease-in-out, transform 0.4s ease-in-out,
    bottom 0.4s ease-in-out;
  border-radius: get-css-var('radius-base');
  box-shadow: get-css-var(shadow-base);
  background: get-css-var(message-bg-color);
  display: flex;

	&__vertical {
		display: flex;
		flex-direction: column;
	}

  p {
    margin: 0;
  }

	&__header {
		display: flex;
		align-items: center;
	}
	&__description {
		margin-top: 6px;
		font-size: 14px;
	}
  &__icon {
    display: flex;
    align-items: center;
    margin-right: 8px;
    color: get-css-var('message-icon-color');
  }

  $types: info success warning error;

  @each $type in $types {
    $color: if($type == 'info', 'primary', $type);

    &--#{$type} {
      @include define-message-style(
        (
          icon-color: 'color' $color 'base'
        )
      );
    }
  }
  &--success {
		@include define-message-style(
			(
				icon-color: 'color' success 'foreground'
			)
		);
	}
}

.#{$namespace}-message--fade-enter-from {
  opacity: 0;
  transform: translate(-60px, 150%);
}
.#{$namespace}-message--fade-leave-to {
  opacity: 0;
  transform: translate(100%, 0%);
}
