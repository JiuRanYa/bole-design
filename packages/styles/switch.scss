@use 'sass:map';
@use './shared' as *;
@use './design' as *;

$switch: () !default;
$switch: map.merge(
  (
    bg-color: get-css-var('fill-color-secondary'),
    bg-color-open: get-css-var('bg-color-reverse'),
    duration: 0.2s,
    height: 22px,
    width: calc(get-css-var('switch-height') * 2),
    signal-size: calc(var(--bl-switch-height) - 4px),
    signal-bg-color: get-css-var(bg-color-base),
    icon-color: get-css-var('color-black')
  ),
  $switch
);

.#{$namespace}-switch {
  @include basis;

  &-vars {
    @include define-preset-values('switch', $switch);
  }

  &--open {
    background-color: get-css-var(switch-bg-color-open);
  }

  border: 0;
  background: get-css-var(switch-bg-color);
  box-sizing: border-box;
  height: get-css-var(switch-height);
  min-width: get-css-var(switch-width);
  border-radius: 100px;
  position: relative;
  display: inline-flex;
  align-items: center;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  margin: 0;
  padding: 0;

  &-signal {
    position: absolute;
    inset-inline-start: 2px;
    width: get-css-var(switch-signal-size);
    height: get-css-var(switch-signal-size);
    transition: all get-css-var(switch-duration) ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    &::before {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      background-color: get-css-var(switch-signal-bg-color);
      border-radius: 50%;
      inset-inline-start: 0;
      inset-inline-end: 0;
    }
    .#{$namespace}-icon {
      color: get-css-var('switch-icon-color');
    }
  }
  &--open &-signal {
    inset-inline-start: calc(100% - get-css-var('switch-signal-size') - 2px);
  }
}
